<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>shiro</display-name>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-content.xml</param-value>
		<param-value>classpath:spring-shiro.xml</param-value>
	</context-param>
	<!-- apache shiro权限 -->
 	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	<filter>
		<description>字符集过滤器</description>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<description>字符集编码</description>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--启动Web容器时，自动装配ApplicationContext的配置信息 -->
	<!--监听器首先检查contextConfigLocation参数，如果它不存在，它将使用/WEB-INF/applicationContext.xml作为默认值。 
		如果已存在，它将使用分隔符（逗号、冒号或空格）将字符串分解成应用上下文将位置路径 -->
	<listener>
		<description>spring监听器</description>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 防止spring内存溢出监听器 -->
	<!--其中JavaBeans Introspector是一个类，位置在Java.bean.Introspector，这个类的用途是发现java类是否符合javaBean规范， 
		也就是这个类是不是javabean。具体用法可以参照jdk文档；上面的意思就是，如果有的框架或者程序用到了JavaBeans Introspector了， 
		那么就启用了一个系统级别的缓存，这个缓存会存放一些曾加载并分析过的javabean的引用， 当web服务器关闭的时候，由于这个缓存中存放着这些javabean的引用， 
		所以垃圾回收器不能对web容器中的javaBean对象进行回收，导致内存越来越大。 spring提供的org.springframework.web.util.IntrospectorCleanupListener就解决了这个问题，他会在web服务器停止的时候， 
		清理一下这个Introspector缓存。使那些javabean能被垃圾回收器正确回收。 spring不会出现这种问题，因为spring在加载并分析完一个类之后会马上刷新JavaBeans 
		Introspector缓存， 这样就保证了spring不会出现这种内存泄漏的问题。但是有很多程序和框架在使用了JavaBeans Introspector之后， 
		都没有进行清理工作，比如quartz、struts；解决办法很简单，就是上面的那个配置。 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- spring mvc servlet -->
	<servlet>
		<description>spring mvc servlet</description>
		<servlet-name>springMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<!-- 此处为springMVC配置栏，若加如shiro的配置xml则会找不到controller。  -->
			<description>spring mvc 配置文件</description>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<welcome-file-list>
		<welcome-file>/index.html</welcome-file>
	</welcome-file-list>
	<!-- 配置session超时时间，单位分钟 -->
	<session-config>
		<session-timeout>15</session-timeout>
	</session-config>
	

</web-app>